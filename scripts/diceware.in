#! /usr/bin/guile \
--no-auto-compile -e main -s
!#

;; Diceware - Program for generating password using diceware,
;; easy for humans to remember hard for a machine to crack.

;; Copyright (C) 2020  Fredrik Salomonsson

;; This file is part of baksnapper

;; Baksnapper is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; Baksnapper is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

(use-modules
 (ice-9 getopt-long)
 (ice-9 format)
 (ice-9 and-let-star)
 (ice-9 textual-ports)
 (ice-9 vlist)
 (ice-9 regex)
 (ice-9 readline)
 (srfi srfi-9)
 (srfi srfi-43)
 (srfi srfi-1))

(define-record-type <diceware>
  (make-diceware name hash)
  diceware?
  (name diceware-name)
  (hash diceware-hash))

(define (main args)
  (let* ((option-spec
          `((delimiter (single-char #\d) (value #t))
            (version (value #f))
            (help (single-char #\h) (value #f))))
         (options (getopt-long (command-line) option-spec)))
    (when (option-ref options 'help #f)
      (format #t "\
Usage: ~a [OPTIONS...] WORDLIST

A simple passphrase generator using any set of dice. The concept is
simple roll a die five times, combine the numbers from the die into a
key and look up the word. Rinse and repeat until you are satisfied
with the passphrase.

For a secure passphrase it is recommended to use at least six words.

The WORDLIST is a file, where each line contains a key and a word
separated by whitespace or tab. The WORDLIST must contain a word for
each combinations a five set dice can generate.

Options:

-d, --delimiter CHAR Set delimiter between the words to CHAR.
-h, --help           Print this help and then exit.
    --version        Print version and then exit.

Author:
~a~!
"
              (car (command-line))
              @AUTHOR@)
      (exit #t))
    (when (option-ref options 'version #f)
      (format #t "diceware-~a~%" @HVERSION@)
      (exit #t))
    (let ((dicewares
           (list->vector
            (map (lambda (filename)
                   (and-let* ((vhash vlist-null)
                              (port (open-input-file filename))
                              (line (get-line port))
                              (diceware-re (make-regexp "([1-6]+)[[:blank:]]+(.*)")))
                     (while (not (eof-object? line))
                       (and-let* ((diceware-match (regexp-exec diceware-re line)))
                         (set! vhash (vhash-cons (match:substring diceware-match 1)
                                                 (match:substring diceware-match 2)
                                                 vhash
                                                 string-hash)))
                       (set! line (get-line port)))
                     (close-port port)
                     (make-diceware (basename filename) vhash)))
                 (option-ref options '() '())))))
      (when (= (vector-length dicewares) 0)
        (format #t "\
Please specify at least one wordlist.
Try 'diceware --help' for more information.
")
        (exit 1))
      (format #t "Welcome to diceware (press Ctrl+d to exit)~%~%")
      (let* ((valid-key (make-regexp "^[1-6]{5}$"))
             (delimiter (option-ref options 'delimiter " "))
             (prompt "-- Please roll five dice and type in the number: ")
             (padding (vector-fold (lambda (i max-width diceware)
                                     (max max-width (string-length (diceware-name diceware))))
                                   0
                                   dicewares))
             (padded-fmt (format #f "~~~d@a" padding))
             (padded-names (vector-map (lambda (i diceware)
                                         (format #f padded-fmt (diceware-name diceware)))
                                       dicewares)))
        (let input ((key (readline prompt))
                    (passphrases (make-vector (vector-length dicewares) '())))
          (when (eof-object? key)
            (format #t "~%")
            (vector-for-each
                 (lambda (i passphrase)
                   (when (not (null? passphrase))
                     (format #t "Your passphrase using ~a is ~s~%"
                             (diceware-name (vector-ref dicewares i))
                             (string-join passphrase delimiter))))
                 passphrases)
            (exit))
          (if (regexp-exec valid-key key)
              (let ((passphrases
                     (vector-map (lambda (i passphrase)
                                   (and-let* ((hash (diceware-hash (vector-ref dicewares i)))
                                              (word (vhash-assoc key hash string=? string-hash)))
                                     `(,@passphrase ,(cdr word))))
                                 passphrases)))
                (vector-for-each
                 (lambda (i passphrase)
                   (when (not (null? passphrase))
                     (format #t "[ ~a ] Current passphrase: ~a~%"
                             (vector-ref padded-names i)
                             (string-join passphrase delimiter))))
                 passphrases)
                (input (readline "-- Next number: ") passphrases))
              (input (readline "EE Invalid key, please try again: ") passphrases)))))))
